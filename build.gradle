// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.41'
    ext.ankoVersion = '0.9.1a'

    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

subprojects {
    configurations.all {
        resolutionStrategy {
            forcedModules = [
                    "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",
                    "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            ]
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task copy_cardboard_images() {
    doFirst {
        exec {
            if (System.properties['os.name'].toLowerCase().contains('windows')) {
                // windows
                commandLine 'cmd', '/c', 'adb', 'pull', '/mnt/shell/emulated/0/DCIM/CardboardCamera'
            } else {
                // linux
                commandLine 'adb', 'pull', '/mnt/shell/emulated/0/DCIM/CardboardCamera'
            }
        }
    }
    doLast {
        copy {
            from 'CardboardCamera'
            into 'website/images'
        }
    }
}

task remove_cardboard_images() {
    doFirst {
        exec {
            if (System.properties['os.name'].toLowerCase().contains('windows')) {
                // windows
                commandLine 'cmd', '/c', 'adb', 'shell', 'rm',  '-r', '/mnt/shell/emulated/0/DCIM/CardboardCamera'
            } else {
                // linux
                commandLine 'adb', 'shell', 'rm',  '-r', '/mnt/shell/emulated/0/DCIM/CardboardCamera'
            }
        }
    }
}

task move_cardboard_images() {
    dependsOn copy_cardboard_images
    dependsOn remove_cardboard_images
}